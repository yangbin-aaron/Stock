package com.aaron.yqb.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.aaron.yqb.greendao.KlineModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "KLINE_MODEL".
*/
public class KlineModelDao extends AbstractDao<KlineModel, Long> {

    public static final String TABLENAME = "KLINE_MODEL";

    /**
     * Properties of entity KlineModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property OpenPrice = new Property(1, Float.class, "openPrice", false, "OPEN_PRICE");
        public final static Property MaxPrice = new Property(2, Float.class, "maxPrice", false, "MAX_PRICE");
        public final static Property ClosePrice = new Property(3, Float.class, "closePrice", false, "CLOSE_PRICE");
        public final static Property MinPrice = new Property(4, Float.class, "minPrice", false, "MIN_PRICE");
        public final static Property InstrumentID = new Property(5, String.class, "instrumentID", false, "INSTRUMENT_ID");
        public final static Property Volume = new Property(6, Integer.class, "volume", false, "VOLUME");
        public final static Property Time = new Property(7, String.class, "time", false, "TIME");
    };


    public KlineModelDao(DaoConfig config) {
        super(config);
    }
    
    public KlineModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"KLINE_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"OPEN_PRICE\" REAL," + // 1: openPrice
                "\"MAX_PRICE\" REAL," + // 2: maxPrice
                "\"CLOSE_PRICE\" REAL," + // 3: closePrice
                "\"MIN_PRICE\" REAL," + // 4: minPrice
                "\"INSTRUMENT_ID\" TEXT," + // 5: instrumentID
                "\"VOLUME\" INTEGER," + // 6: volume
                "\"TIME\" TEXT);"); // 7: time
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"KLINE_MODEL\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, KlineModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Float openPrice = entity.getOpenPrice();
        if (openPrice != null) {
            stmt.bindDouble(2, openPrice);
        }
 
        Float maxPrice = entity.getMaxPrice();
        if (maxPrice != null) {
            stmt.bindDouble(3, maxPrice);
        }
 
        Float closePrice = entity.getClosePrice();
        if (closePrice != null) {
            stmt.bindDouble(4, closePrice);
        }
 
        Float minPrice = entity.getMinPrice();
        if (minPrice != null) {
            stmt.bindDouble(5, minPrice);
        }
 
        String instrumentID = entity.getInstrumentID();
        if (instrumentID != null) {
            stmt.bindString(6, instrumentID);
        }
 
        Integer volume = entity.getVolume();
        if (volume != null) {
            stmt.bindLong(7, volume);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(8, time);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public KlineModel readEntity(Cursor cursor, int offset) {
        KlineModel entity = new KlineModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getFloat(offset + 1), // openPrice
            cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2), // maxPrice
            cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3), // closePrice
            cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4), // minPrice
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // instrumentID
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // volume
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // time
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, KlineModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOpenPrice(cursor.isNull(offset + 1) ? null : cursor.getFloat(offset + 1));
        entity.setMaxPrice(cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2));
        entity.setClosePrice(cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3));
        entity.setMinPrice(cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4));
        entity.setInstrumentID(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setVolume(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(KlineModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(KlineModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
